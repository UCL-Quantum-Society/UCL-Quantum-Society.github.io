---
import Container from "./Container.astro";

export interface Props {
    textClass?: string;
    shadowClass?: string;
    hamburgerClass?: string;
    navBackgroundClass?: string;
}

const { textClass, shadowClass, hamburgerClass, navBackgroundClass } = Astro.props;

// Define text color classes 
const logoTextClass = textClass || "text-primary";
const menuIconClass = hamburgerClass || "bg-black";
const navLinksTextClass = textClass || "text-gray-600";
const specialLinkTextClass = textClass || "text-gray-700";
const navShadowClass = shadowClass || "shadow-lg";
const navBgClass = navBackgroundClass || "bg-white";

const links = [
    {
        to: "/",
        label: "Homepage",
    },
    {
        to: "/about/",
        label: "About Us",
    },
    // {
    //     to: "/#calendar",
    //     label: "Event Calendar",
    // },
];
---

<header>
    <nav id="nav" class={`${navShadowClass} absolute group z-30 w-full border-b border-black/5 lg:border-transparent`}>
        <Container>
            <div class="relative flex flex-wrap items-center justify-between gap-6 py-3 md:gap-0 md:py-4">
                <div class="relative z-50 flex w-full justify-between md:px-0 lg:w-fit">
                    <a href="/#home" aria-label="logo" class="flex items-center space-x-2">
                        {
                            /* Choose white logo when nav background is dark (e.g., bg-black) */
                        }
                        <img src={navBgClass === 'bg-black' ? '/UCLQ_Logo_White.png' : '/UCLQ_Logo.png'} alt="UCL Quantum Society logo" class="h-10 w-auto object-contain" />
                        <span class={`text-2xl font-medium ${logoTextClass}`}>UCL Quantum Society</span>
                    </a>
                    <div class="relative flex max-h-10 items-center lg:hidden">
                        <button aria-label="humburger" id="hamburger" class="relative -mr-6 p-6 active:scale-95 duration-300">
                            <div aria-hidden="true" id="line" class={`m-auto h-0.5 w-5 rounded ${menuIconClass} transition duration-300 origin-top group-data-[state=active]:rotate-45 group-data-[state=active]:translate-y-1.5`}></div>
                            <div aria-hidden="true" id="line2" class={`m-auto mt-2 h-0.5 w-5 rounded ${menuIconClass} transition duration-300 origin-bottom group-data-[state=active]:-rotate-45 group-data-[state=active]:-translate-y-1`}></div>
                        </button>
                    </div>
                </div>
                <div id="navLayer" aria-hidden="true" class="fixed inset-0 z-40 h-screen w-screen origin-bottom scale-y-0 bg-white/70 backdrop-blur-2xl transition duration-500 group-data-[state=active]:origin-top group-data-[state=active]:scale-y-100  lg:hidden"></div>
                <div id="navlinks" class={`invisible absolute top-full left-0 z-50 w-full origin-top-right translate-y-1 scale-90 flex-col flex-wrap justify-end gap-6 rounded-3xl border ${navBgClass === 'bg-black' ? 'border-gray-700' : 'border-gray-100'} ${navBgClass} p-8 opacity-0 shadow-2xl shadow-gray-600/10 transition-all duration-300 lg:visible lg:relative lg:flex lg:w-fit lg:translate-y-0 lg:scale-100 lg:flex-row lg:items-center lg:gap-0 lg:border-none lg:bg-transparent lg:p-0 lg:opacity-100 lg:shadow-none group-data-[state=active]:visible group-data-[state=active]:scale-100 group-data-[state=active]:opacity-100 group-data-[state=active]:translate-y-0`}>
                    <div class={`w-full ${navLinksTextClass} lg:w-auto lg:pr-4 lg:pt-0`}>
                        <div id="links-group" class="flex flex-col gap-6 tracking-wide lg:flex-row lg:gap-0 lg:text-sm">
                            {
                                links.map((link) => (
                                    <a href={link.to} class="hover:text-primary block transition md:px-4 font-semibold">
                                        <span>{link.label}</span>
                                    </a>
                                ))
                            }
                            <a class={`flex gap-2 font-semibold transition hover:text-primary ${specialLinkTextClass} md:px-4`}>
                                <span>Resource Hub</span>
                                <span class="flex rounded-full border bg-primary/20 px-2 py-0.5 text-xs tracking-wider text-primary">Coming Soon!</span>
                            </a>
                        </div>
                    </div>

                    <div class="mt-12 lg:mt-0">
                        <a href="/qff/" class="relative flex h-9 w-full items-center justify-center px-4 bg-gradient-to-r from-qff-pink to-qff-purple rounded-full transition-all duration-300 transform hover:scale-105 sm:w-max">
                            <span class="relative text-sm font-semibold text-white">Qiskit Fall Fest 2025</span>
                        </a>
                    </div>
                </div>
            </div>
        </Container>
    </nav>
</header>

<script>
    let isToggled = false;
    const navbar = document.querySelector("#nav") as HTMLElement;
    const menuBtn = document.querySelector("#hamburger") as HTMLButtonElement;
    const links = [...navbar.querySelector("#links-group").children] as HTMLAnchorElement[];

    function toggleNavlinks() {
        if (isToggled) {
            navbar.dataset.state = "active";
        } else {
            navbar.dataset.state = "";
        }
    }

    menuBtn.addEventListener("click", () => {
        isToggled = !isToggled;
        toggleNavlinks();
    });

    links.forEach((link) => {
        link.addEventListener("click", () => {
            isToggled = !isToggled;
            toggleNavlinks();
        });
    });
</script>